# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TXWsE611u9Rx-stlix5BI0n9LYwYHTEf
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv("/content/breast-cancer.data")

data.head()

data.tail()

data.info()

data.describe()

data.count()

data.columns = ["class", "age", "menopause","tumor-size", "inv-nodes",
                "node-caps", "deg-malig", "breast", "breast-quad", "irradiat"  ]

data.columns

data.value_counts

plt.hist(data['class'])
plt.title('class')
plt.show()

data.head()

data['node-caps'].value_counts()

data["node-caps"] = data['node-caps'].replace(to_replace='?', value='no')

data['breast-quad'].value_counts()

data["breast-quad"] = data['breast-quad'].replace(to_replace='?', value='left_low')

data.drop_duplicates(subset=None, keep="first", inplace=False)

class_map={"no-recurrence-events": 1, "recurrence-events":0}

data['class']=data['class'].map(class_map)

age_map={"10-19":1, "20-29": 2, "30-39": 3,
        "40-49": 4, "50-59": 5,"60-69": 6,
        "70-79": 7, "80-89": 8,"90-99": 9 }
data['age']= data['age'].map(age_map)

menop_map={"premeno": 1, "ge40": 2, "lt40": 3}
data['menopause']=data['menopause'].map(menop_map)

tumor_map={"0-4":1, "5-9":2,"10-14":3, "15-19":4,"20-24":5, "25-29":6,
           "30-34":7, "35-39":8,"40-44":9, 
           "45-49":10,"50-54":11, "55-59":12}
data['tumor-size']= data['tumor-size'].map(tumor_map)

inv_map={"0-2":1, "3-5":2,"6-8":3, "9-11":4,
         "12-14":5, "15-17":6,"18-20":7, 
         "21-23":8,"24-26":9, "27-29":10,
         "30-32":11, "33-35":12, "36-39":13}
data['inv-nodes']= data['inv-nodes'].map(inv_map)

node_map={"yes": 1, "no": 0}
data['node-caps']=data['node-caps'].map(node_map)

breast_map={"left": 0, "right": 1}
data['breast']=data['breast'].map(breast_map)

quad_map={"left_up": 0, "left_low": 1, "right_up": 2,
          "right_low": 3, "central": 4}
data['breast-quad']=data['breast-quad'].map(quad_map)

irr_map={"yes": 1, "no": 0}
data['irradiat']=data['irradiat'].map(irr_map)

data.head()

data.groupby('class').hist(figsize=(10, 10))

data.shape

from sklearn.model_selection import train_test_split
from sklearn.datasets import make_classification
from sklearn import svm, tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

X = data.drop('class', axis=1)
y=data['class']

X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.25, random_state=None)

from sklearn.tree import DecisionTreeClassifier

model = DecisionTreeClassifier().fit(X_train,y_train)

print(f"Accuracy of Decision Tree classifier on training set:{ model.score(X_test,y_test)}")

y_pred = model.predict(X_test)

print("Accuracy",accuracy_score(y_test,y_pred) )

from sklearn.metrics import confusion_matrix

conmat = confusion_matrix(y_test, y_pred)

val = np.mat(conmat) 

classnames = list(set(y_train))

df_cm = pd.DataFrame(

        val, index=classnames, columns=classnames, 

    )

print(df_cm)

plt.figure()

heatmap = sns.heatmap(df_cm, annot=True, cmap="Blues")

heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right')

heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=45, ha='right')

plt.ylabel('True label')

plt.xlabel('Predicted label')

from sklearn.neighbors import KNeighborsClassifier

model2 = KNeighborsClassifier().fit(X_train,y_train)
print(f"Accuracy of K-NN classifier on training set:{ model2.score(X_test,y_test)}")

y_pred = model2.predict(X_test)

conmat = confusion_matrix(y_test, y_pred)

val = np.mat(conmat) 

classnames = list(set(y_train))

df_cm = pd.DataFrame(

        val, index=classnames, columns=classnames, 

    )

print(df_cm)

plt.figure()

heatmap = sns.heatmap(df_cm, annot=True, cmap="Blues")

heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right')

heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=45, ha='right')

plt.ylabel('True label')

plt.xlabel('Predicted label')

from sklearn.ensemble import RandomForestClassifier

rand = RandomForestClassifier().fit(X_train,y_train)
print(f"Accuracy of Random forest classifier on training set:{ rand.score(X_test,y_test)}")

y_pred = rand.predict(X_test)

conmat = confusion_matrix(y_test, y_pred)

val = np.mat(conmat) 

classnames = list(set(y_train))

df_cm = pd.DataFrame(

        val, index=classnames, columns=classnames, 

    )

print(df_cm)

plt.figure()

heatmap = sns.heatmap(df_cm, annot=True, cmap="Blues")

heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right')

heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=45, ha='right')

plt.ylabel('True label')

plt.xlabel('Predicted label')

X_test.head()

# Commented out IPython magic to ensure Python compatibility.
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
# %matplotlib inline

data.head()

from sklearn.preprocessing import StandardScaler

X = data.drop('class', axis=1)
X = StandardScaler().fit_transform(X)

km = KMeans(n_clusters=2)
km_pred = km.fit_predict(X)

print(km_pred)

import seaborn as sns
from sklearn.decomposition import PCA

reduced_data = PCA(n_components=2).fit_transform(X)
results = pd.DataFrame(reduced_data,columns=['pca1','pca2'])
sns.scatterplot(x="pca1", y="pca2", hue=km_pred, data=results)
plt.show()

from sklearn.cluster import DBSCAN

from sklearn.cluster import AgglomerativeClustering

algo = AgglomerativeClustering(n_clusters=2)
algo_pred = algo.fit_predict(data)

print(algo_pred)

reduced_data = PCA(n_components=2).fit_transform(X)
results = pd.DataFrame(reduced_data,columns=['pca1','pca2'])
sns.scatterplot(x="pca1", y="pca2", hue=algo_pred, data=results)
plt.show()

reduced_data = PCA(n_components=2).fit_transform(X)
results = pd.DataFrame(reduced_data,columns=['pca1','pca2'])
sns.scatterplot(x="pca1", y="pca2", hue=k_m_pred, data=results)
plt.show()

from sklearn.cluster import Birch

b = Birch(n_clusters=2)
b_pred = b.fit_predict(X)

reduced_data = PCA(n_components=2).fit_transform(X)
results = pd.DataFrame(reduced_data,columns=['pca1','pca2'])
sns.scatterplot(x="pca1", y="pca2", hue=b_pred, data=results)
plt.show()